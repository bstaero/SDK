/*=+--+=#=+--         SwiftCore Flight Management Software        --+=#=+--+=#*\
|               Copyright (C) 2015 Black Swift Technologies LLC.               |
|                             All Rights Reserved.                             |

     NOTICE:  All information contained herein is, and remains the property 
     of Black Swift Technologies.

     The intellectual and technical concepts contained herein are 
     proprietary to Black Swift Technologies LLC and may be covered by U.S. 
     and foreign patents, patents in process, and are protected by trade 
     secret or copyright law.

     Dissemination of this information or reproduction of this material is 
     strictly forbidden unless prior written permission is obtained from 
     Black Swift Technologies LLC.

                               Jack Elston
                       Jack.Elston@blackswifttech.com                          

                               Cory Dixon
                         Cory.Dixon@blackswifttech.com                          

                             Maciej Stachura
|                   Maciej.Stachura@blackswifttech.com                         |
|                                                                              |
\*=+--+=#=+--                 --+=#=+--+=#=+--                    --+=#=+--+=#*/

/*                     THIS FILE IS AUTOGENERATED BY                          *\
|*                                msg-gen.py                                  *|
\*                               DO NOT EDIT                                  */

#ifndef _GCS_H_
#define _GCS_H_

#include <inttypes.h>

#ifdef __cplusplus
namespace bst {
namespace comms {
namespace gcs {
#endif

/*--------[ GCS ]--------*/

typedef enum {
	SURVEY_IN_WAITING,
	SURVEY_IN_REQUESTED,
	SURVEY_IN_COMPLETE,
	SENDING_RTCM3,
}  __attribute__ ((packed)) GCSRTKFlags_t;

typedef struct _GCSStatus_t {
	int8_t rssi;  // dBmW
	uint16_t num_drop;  // number of dropped bytes
	uint8_t hour;  // hour from gps
	uint8_t minute;  // minute from gps
	float seconds;  // seconds from gps
	uint8_t satellites;  // number of sats in view
	float pdop;  // pdop
	float battery_v;  // battery voltage
	float battery_i;  // current through battery
	float batt_level;  // percent of battery capacity
	uint8_t error;  // error code

#ifdef __cplusplus
	_GCSStatus_t() {
		rssi = 0;
		num_drop = 0;
		hour = 0;
		minute = 0;
		seconds = 0.0;
		satellites = 0;
		pdop = 0.0;
		battery_v = 0.0;
		battery_i = 0.0;
		batt_level = 0.0;
		error = 0;
	}
#endif
} __attribute__ ((packed)) GCSStatus_t;

typedef struct _HDOBConfig_t {
	uint8_t vehicle_type;
	uint8_t mission_number;
	uint8_t storm_number;
	char storm_name[32];

#ifdef __cplusplus
	_HDOBConfig_t() {
		uint8_t _i;

		vehicle_type = 0;
		mission_number = 0;
		storm_number = 0;

		for (_i = 0; _i < 32; ++_i)
			storm_name[_i] = 0;
	}
#endif
} __attribute__ ((packed)) HDOBConfig_t;

typedef struct _GCSSurveyIn_t {
	uint32_t time_elapsed;  // [s] - time since start of survey in was requested
	uint32_t time_minimum;  // [s] - time required for survey in
	float accuracy;  // [s] - current accuracy of survey in
	float accuracy_minimum;  // [s] - minimum accuracy required for survey in
	GCSRTKFlags_t flags;

#ifdef __cplusplus
	_GCSSurveyIn_t() {
		time_elapsed = 0;
		time_minimum = 0;
		accuracy = 0.0;
		accuracy_minimum = 0.0;
	}
#endif
} __attribute__ ((packed)) GCSSurveyIn_t;

/*--------[ Status ]--------*/

typedef enum {
	/* The further down the list, the higher the error priority */
	ERROR_NO_ERROR,
	ERROR_LOW_BATT,
	ERROR_HIGH_BATT,
	ERROR_NO_BATT,
	ERROR_BAD_GPS,
	ERROR_NO_GPS,
	ERROR_NO_RADIO,
	ERROR_HIGH_CURRENT,
	ERROR_HIGH_TEMP,
}  __attribute__ ((packed)) GCSErrors_t;

/*--------[ Telemetry ]--------*/

typedef struct _TelemetryGCS_t {
	float latitude;  // [deg]
	float longitude;  // [deg]
	float altitude;  // [m] - mean sea level
	float speed;  // [m/s] - ground speed
	float course;  // [deg] - course over ground
	float pressure;  // [Pa] - atmospheric pressure
	/* int64 latitude # [deg * 1e16] */
	/* int64 longitude # [deg * 1e16] */
	/* int32 altitude # [m * 1000] - mean sea level */
	/* int16_t speed # [m/s * 10] - ground speed */
	/* uint16_t course # [deg * 100] - course over ground */
	/* uint32_t static_pressure # [Pa * 10] - atmospheric pressure */

#ifdef __cplusplus
	_TelemetryGCS_t() {
		latitude = 0.0;
		longitude = 0.0;
		altitude = 0.0;
		speed = 0.0;
		course = 0.0;
		pressure = 0.0;
	}
#endif
} __attribute__ ((packed)) TelemetryGCS_t;

#ifdef __cplusplus
} /* namespace gcs */

} /* namespace comms */
} /* namespace bst */
#endif

#endif /* _GCS_H_ */
